{"ast":null,"code":"var _jsxFileName = \"/Users/yinruoyan/Documents/GitHub/reactCodeF/src/pages/locateMe.js\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst DataForm = () => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      postalCode: \"\",\n      year: \"\"\n    },\n    validate: values => {\n      const errors = {};\n\n      if (!values.postalCode) {\n        errors.postalCode = \"Required\";\n      }\n\n      if (!values.year) {\n        errors.year = \"Required\";\n      } else if (!/^[1-2]+\\.[0-9]+\\.[0-9]+\\.[0-9]{2,}$/i.test(values.year)) {\n        errors.email = \"Invalid year\";\n      }\n\n      return errors;\n    },\n    onSubmit: (values, {\n      setSubmitting\n    }) => {\n      // post data to server\n      alert(JSON.stringify(values, null, 2));\n      setSubmitting(false);\n    },\n    children: ({\n      isSubmitting,\n      dirty,\n      handleReset\n    }) => /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Postal Code:\", /*#__PURE__*/_jsxDEV(Field, {\n            type: \"text\",\n            name: \"postalCode\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"postalCode\",\n          component: \"span\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          type: \"email\",\n          name: \"email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"email\",\n          component: \"span\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleReset,\n        disabled: !dirty || isSubmitting,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isSubmitting,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this)\n}, void 0, false);\n\n_c = DataForm;\nexport default DataForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataForm\");","map":{"version":3,"sources":["/Users/yinruoyan/Documents/GitHub/reactCodeF/src/pages/locateMe.js"],"names":["Formik","Form","Field","ErrorMessage","DataForm","postalCode","year","values","errors","test","email","setSubmitting","alert","JSON","stringify","isSubmitting","dirty","handleReset"],"mappings":";AAAA,SAASA,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,YAA9B,QAAkD,QAAlD;;;;AAEA,MAAMC,QAAQ,GAAG,mBACf;AAAA,yBACE,QAAC,MAAD;AACE,IAAA,aAAa,EAAE;AAAEC,MAAAA,UAAU,EAAE,EAAd;AAAkBC,MAAAA,IAAI,EAAE;AAAxB,KADjB;AAEE,IAAA,QAAQ,EAAGC,MAAD,IAAY;AACpB,YAAMC,MAAM,GAAG,EAAf;;AACA,UAAI,CAACD,MAAM,CAACF,UAAZ,EAAwB;AACtBG,QAAAA,MAAM,CAACH,UAAP,GAAoB,UAApB;AACD;;AAED,UAAI,CAACE,MAAM,CAACD,IAAZ,EAAkB;AAChBE,QAAAA,MAAM,CAACF,IAAP,GAAc,UAAd;AACD,OAFD,MAEO,IAAI,CAAC,uCAAuCG,IAAvC,CAA4CF,MAAM,CAACD,IAAnD,CAAL,EAA+D;AACpEE,QAAAA,MAAM,CAACE,KAAP,GAAe,cAAf;AACD;;AACD,aAAOF,MAAP;AACD,KAdH;AAeE,IAAA,QAAQ,EAAE,CAACD,MAAD,EAAS;AAAEI,MAAAA;AAAF,KAAT,KAA+B;AACvC;AACAC,MAAAA,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeP,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAD,CAAL;AACAI,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD,KAnBH;AAAA,cAqBG,CAAC;AAAEI,MAAAA,YAAF;AAAgBC,MAAAA,KAAhB;AAAuBC,MAAAA;AAAvB,KAAD,kBACC,QAAC,IAAD;AAAA,8BACE;AAAA,gCACE;AAAA,kDAEE,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,IAAI,EAAC;AAAxB;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAKE,QAAC,YAAD;AAAc,UAAA,IAAI,EAAC,YAAnB;AAAgC,UAAA,SAAS,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAQE;AAAA,gCACE;AAAO,UAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,OAAZ;AAAoB,UAAA,IAAI,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,YAAD;AAAc,UAAA,IAAI,EAAC,OAAnB;AAA2B,UAAA,SAAS,EAAC;AAArC;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cARF,eAaE;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,OAAO,EAAEA,WAFX;AAGE,QAAA,QAAQ,EAAE,CAACD,KAAD,IAAUD,YAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbF,eAoBE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,QAAQ,EAAEA,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAtBJ;AAAA;AAAA;AAAA;AAAA;AADF,iBADF;;KAAMX,Q;AAqDN,eAAeA,QAAf","sourcesContent":["import { Formik, Form, Field, ErrorMessage } from \"formik\";\n\nconst DataForm = () => (\n  <>\n    <Formik\n      initialValues={{ postalCode: \"\", year: \"\" }}\n      validate={(values) => {\n        const errors = {};\n        if (!values.postalCode) {\n          errors.postalCode = \"Required\";\n        }\n\n        if (!values.year) {\n          errors.year = \"Required\";\n        } else if (!/^[1-2]+\\.[0-9]+\\.[0-9]+\\.[0-9]{2,}$/i.test(values.year)) {\n          errors.email = \"Invalid year\";\n        }\n        return errors;\n      }}\n      onSubmit={(values, { setSubmitting }) => {\n        // post data to server\n        alert(JSON.stringify(values, null, 2));\n        setSubmitting(false);\n      }}\n    >\n      {({ isSubmitting, dirty, handleReset }) => (\n        <Form>\n          <div>\n            <label>\n              Postal Code:\n              <Field type=\"text\" name=\"postalCode\" />\n            </label>\n            <ErrorMessage name=\"postalCode\" component=\"span\" />\n          </div>\n          <div>\n            <label htmlFor=\"email\">Email</label>\n            <Field type=\"email\" name=\"email\" />\n            <ErrorMessage name=\"email\" component=\"span\" />\n          </div>\n          <button\n            type=\"button\"\n            onClick={handleReset}\n            disabled={!dirty || isSubmitting}\n          >\n            Reset\n          </button>\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </Form>\n      )}\n    </Formik>\n  </>\n);\n\nexport default DataForm;\n"]},"metadata":{},"sourceType":"module"}